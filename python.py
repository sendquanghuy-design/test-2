import streamlit as st
import pandas as pd
import numpy_financial as npf
from google import genai
from google.genai.errors import APIError
from docx import Document
import json
import io
import time # For exponential backoff simulation (best practice)

# --- Th∆∞ vi·ªán c·∫ßn thi·∫øt: streamlit, pandas, numpy, python-docx, google-genai ---

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh AI",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Kh·ªüi t·∫°o session state ---
if "parameters" not in st.session_state:
    st.session_state.parameters = None
if "cash_flow_df" not in st.session_state:
    st.session_state.cash_flow_df = None
if "metrics" not in st.session_state: # S·ª¨A L·ªñI: B·ªè ƒëi t·ª´ 'not' th·ª´a
    st.session_state.metrics = None
if "ai_analysis" not in st.session_state:
    st.session_state.ai_analysis = None

st.title("üí° ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh v·ªõi AI")
st.markdown("---")

# ----------------------------------------------------
#               C√ÅC H√ÄM X·ª¨ L√ù V√Ä T√çNH TO√ÅN
# ----------------------------------------------------

def extract_text_from_docx(file):
    """ƒê·ªçc v√† tr√≠ch xu·∫•t to√†n b·ªô vƒÉn b·∫£n t·ª´ file Word (.docx)."""
    try:
        doc = Document(file)
        full_text = []
        for para in doc.paragraphs:
            full_text.append(para.text)
        return "\n".join(full_text)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file Word: {e}")
        return None

def call_gemini_api(prompt, schema, api_key):
    """H√†m g·ªçi Gemini API v·ªõi c·∫•u h√¨nh schema JSON ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash-preview-05-20'

        payload = {
            "contents": [{"parts": [{"text": prompt}]}],
            "generationConfig": {
                "responseMimeType": "application/json",
                "responseSchema": schema
            },
        }
        
        # Th·ª±c hi·ªán API call v·ªõi exponential backoff
        for attempt in range(3):
            try:
                response = client.models.generate_content(
                    model=model_name,
                    contents=payload['contents'],
                    config=payload['generationConfig']
                )
                
                # Ki·ªÉm tra v√† parse JSON
                json_text = response.text.strip()
                if json_text.startswith('```json'):
                    json_text = json_text.replace('```json', '').replace('```', '').strip()
                
                return json.loads(json_text)
            except (APIError, json.JSONDecodeError) as e:
                if attempt < 2:
                    st.warning(f"L·ªói API ho·∫∑c JSON. ƒêang th·ª≠ l·∫°i l·∫ßn {attempt + 2}...")
                    time.sleep(2 ** attempt) # Exponential backoff
                    continue
                else:
                    raise e

        return None

    except APIError as e:
        return {"error": f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"}
    except Exception as e:
        return {"error": f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"}

def extract_financial_parameters(raw_text, api_key):
    """
    Nhi·ªám v·ª• 1: L·ªçc c√°c th√¥ng tin t√†i ch√≠nh b·∫±ng AI v√† tr·∫£ v·ªÅ JSON.
    """
    system_prompt = (
        "B·∫°n l√† m·ªôt AI chuy√™n gia t√†i ch√≠nh. H√£y ƒë·ªçc vƒÉn b·∫£n sau v√† tr√≠ch xu·∫•t "
        "ch√≠nh x√°c 6 th√¥ng s·ªë t√†i ch√≠nh ƒë∆∞·ª£c y√™u c·∫ßu. C√°c gi√° tr·ªã ph·∫£i l√† S·ªê (kh√¥ng c√≥ ƒë∆°n v·ªã ti·ªÅn t·ªá) "
        "v√† Thu·∫ø/WACC ph·∫£i ·ªü d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 10% l√† 0.1)."
    )
    
    # ƒê·ªãnh nghƒ©a Schema JSON cho ƒë·∫ßu ra mong mu·ªën
    schema = {
        "type": "OBJECT",
        "properties": {
            "v·ªën_ƒë·∫ßu_t∆∞": {"type": "NUMBER", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (VND, ch·ªâ l√† s·ªë)."},
            "d√≤ng_ƒë·ªùi_d·ª±_√°n": {"type": "INTEGER", "description": "D√≤ng ƒë·ªùi d·ª± √°n theo nƒÉm."},
            "doanh_thu_h√†ng_nƒÉm": {"type": "NUMBER", "description": "Doanh thu ho·∫°t ƒë·ªông trung b√¨nh h√†ng nƒÉm (VND, ch·ªâ l√† s·ªë)."},
            "chi_ph√≠_h√†ng_nƒÉm": {"type": "NUMBER", "description": "T·ªïng chi ph√≠ ho·∫°t ƒë·ªông trung b√¨nh h√†ng nƒÉm (VND, kh√¥ng bao g·ªìm kh·∫•u hao/l√£i vay)."},
            "wacc": {"type": "NUMBER", "description": "Chi ph√≠ v·ªën b√¨nh qu√¢n (WACC) d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 10% l√† 0.1)."},
            "thu·∫ø": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t thu nh·∫≠p doanh nghi·ªáp d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 20% l√† 0.2)."}
        },
        "required": ["v·ªën_ƒë·∫ßu_t∆∞", "d√≤ng_ƒë·ªùi_d·ª±_√°n", "doanh_thu_h√†ng_nƒÉm", "chi_ph√≠_h√†ng_nƒÉm", "wacc", "thu·∫ø"]
    }
    
    prompt = f"{system_prompt}\n\nVƒÉn b·∫£n: {raw_text}"
    
    return call_gemini_api(prompt, schema, api_key)

def calculate_cash_flow(params):
    """
    Nhi·ªám v·ª• 2: X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn t·ª´ c√°c th√¥ng s·ªë ƒë√£ l·ªçc.
    Gi·∫£ ƒë·ªãnh: D√≤ng ti·ªÅn ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh t·ª´ nƒÉm 1 ƒë·∫øn nƒÉm N.
    """
    try:
        I = params['v·ªën_ƒë·∫ßu_t∆∞']
        N = params['d√≤ng_ƒë·ªùi_d·ª±_√°n']
        R = params['doanh_thu_h√†ng_nƒÉm']
        C = params['chi_ph√≠_h√†ng_nƒÉm']
        T = params['thu·∫ø']
        
        # T√≠nh to√°n D√≤ng ti·ªÅn ho·∫°t ƒë·ªông (Operating Cash Flow - OCF)
        # OCF = (Doanh thu - Chi ph√≠) * (1 - Thu·∫ø su·∫•t)
        OCF = (R - C) * (1 - T)

        # X√¢y d·ª±ng b·∫£ng D√≤ng ti·ªÅn
        years = list(range(N + 1)) # NƒÉm 0 ƒë·∫øn NƒÉm N
        cash_flows = [-I] + [OCF] * N
        
        df = pd.DataFrame({
            'NƒÉm': years,
            'D√≤ng ti·ªÅn Ho·∫°t ƒë·ªông (OCF)': [0] + [OCF] * N,
            'ƒê·∫ßu t∆∞ (I)': [-I] + [0] * N,
            'D√≤ng ti·ªÅn Thu·∫ßn (CF)': cash_flows
        })
        
        return df
    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh t√≠nh to√°n D√≤ng ti·ªÅn: {e}")
        return None

def calculate_metrics(df, wacc):
    """
    Nhi·ªám v·ª• 3: T√≠nh to√°n c√°c ch·ªâ s·ªë ƒë√°nh gi√° hi·ªáu qu·∫£ d·ª± √°n.
    """
    cash_flows = df['D√≤ng ti·ªÅn Thu·∫ßn (CF)'].values
    
    # 1. NPV (Net Present Value)
    npv_value = np.npv(wacc, cash_flows)
    
    # 2. IRR (Internal Rate of Return)
    try:
        irr_value = np.irr(cash_flows)
    except:
        irr_value = np.nan # C√≥ th·ªÉ kh√¥ng t√≠nh ƒë∆∞·ª£c n·∫øu d√≤ng ti·ªÅn kh√¥ng ƒë·ªïi d·∫•u
    
    # 3. Payback Period (PP) v√† Discounted Payback Period (DPP)
    
    # T√≠nh d√≤ng ti·ªÅn chi·∫øt kh·∫•u
    discounted_cf = []
    for t, cf in enumerate(cash_flows):
        discounted_cf.append(cf / ((1 + wacc) ** t))
        
    df['D√≤ng ti·ªÅn Chi·∫øt kh·∫•u'] = discounted_cf
    
    # T√≠nh d√≤ng ti·ªÅn t√≠ch l≈©y v√† d√≤ng ti·ªÅn chi·∫øt kh·∫•u t√≠ch l≈©y
    cumulative_cf = np.cumsum(cash_flows)
    cumulative_dcf = np.cumsum(discounted_cf)
    
    # 4. PP (Payback Period)
    try:
        investment = abs(cash_flows[0])
        payback_year = np.where(cumulative_cf >= 0)[0][0]
        # Th·ªùi gian ho√†n v·ªën = NƒÉm tr∆∞·ªõc + (Kho·∫£n c√≤n thi·∫øu / D√≤ng ti·ªÅn nƒÉm ƒë√≥)
        if payback_year == 0:
             pp_value = 0
        else:
             cf_prior = cumulative_cf[payback_year - 1]
             cf_at_payback = cash_flows[payback_year]
             pp_value = (payback_year - 1) + (investment + cf_prior) / cf_at_payback
    except:
        pp_value = np.inf # Kh√¥ng bao gi·ªù ho√†n v·ªën

    # 5. DPP (Discounted Payback Period) - Logic t∆∞∆°ng t·ª± PP, d√πng DCF
    try:
        discounted_investment = abs(discounted_cf[0])
        dpp_year = np.where(cumulative_dcf >= 0)[0][0]
        if dpp_year == 0:
             dpp_value = 0
        else:
             dcf_prior = cumulative_dcf[dpp_year - 1]
             dcf_at_payback = discounted_cf[dpp_year]
             dpp_value = (dpp_year - 1) + (discounted_investment + dcf_prior) / dcf_at_payback
    except:
        dpp_value = np.inf

    return {
        'NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)': npv_value,
        'IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)': irr_value,
        'PP (Th·ªùi gian ho√†n v·ªën)': pp_value,
        'DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u)': dpp_value
    }

def get_ai_business_analysis(metrics, wacc, api_key):
    """
    Nhi·ªám v·ª• 4: Ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n b·∫±ng AI.
    """
    system_prompt = (
        "B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n ƒë·∫ßu t∆∞. "
        "D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra m·ªôt ƒë√°nh gi√° kh√°ch quan, "
        "ng·∫Øn g·ªçn (kho·∫£ng 3 ƒëo·∫°n) v·ªÅ kh·∫£ nƒÉng ch·∫•p nh·∫≠n ƒë·∫ßu t∆∞ c·ªßa d·ª± √°n. "
        "L∆∞u √Ω: WACC (Chi ph√≠ v·ªën) l√† {wacc:.2%}. D√πng ng√¥n ng·ªØ chuy√™n nghi·ªáp v√† d·ªÖ hi·ªÉu."
    ).format(wacc=wacc)

    metrics_text = (
        f"NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng): {metrics['NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)']:.0f} VND\n"
        f"IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô): {metrics['IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)']:.2%}\n"
        f"PP (Th·ªùi gian ho√†n v·ªën): {metrics['PP (Th·ªùi gian ho√†n v·ªën)']:.2f} nƒÉm\n"
        f"DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u): {metrics['DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u)']:.2f} nƒÉm"
    )

    prompt = f"{system_prompt}\n\nC√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£ D·ª± √°n:\n{metrics_text}"

    # S·ª≠ d·ª•ng h√†m g·ªçi API chung, kh√¥ng c·∫ßn schema v√¨ ƒë√¢y l√† output d·∫°ng text
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text
    except Exception as e:
        return f"L·ªói g·ªçi AI ƒë·ªÉ ph√¢n t√≠ch: {e}"

# ----------------------------------------------------
#                    GIAO DI·ªÜN STREAMLIT
# ----------------------------------------------------

# L·∫•y API Key t·ª´ Streamlit Secrets
GEMINI_API_KEY = st.secrets.get("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    st.error("‚ùå L·ªói c·∫•u h√¨nh: Vui l√≤ng th√™m Kh√≥a API Gemini ('GEMINI_API_KEY') v√†o Streamlit Secrets.")

st.markdown("---")
st.markdown("### 1. T·∫£i l√™n v√† Tr√≠ch xu·∫•t D·ªØ li·ªáu")

uploaded_file = st.file_uploader(
    "üì§ T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh:",
    type=['docx'],
    help="File Word c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c AI ƒë·ªçc ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh c∆° b·∫£n."
)

if uploaded_file and GEMINI_API_KEY:
    
    # N√∫t b·∫•m k√≠ch ho·∫°t AI Extraction
    if st.button("ü§ñ K√≠ch ho·∫°t AI L·ªçc D·ªØ li·ªáu", use_container_width=True):
        st.session_state.cash_flow_df = None
        st.session_state.metrics = None
        st.session_state.ai_analysis = None

        with st.spinner("‚è≥ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh t·ª´ file Word..."):
            
            # ƒê·ªçc n·ªôi dung file Word
            raw_text = extract_text_from_docx(uploaded_file)
            if raw_text:
                
                # G·ªçi AI ƒë·ªÉ tr√≠ch xu·∫•t JSON
                params = extract_financial_parameters(raw_text, GEMINI_API_KEY)
                
                if params and "error" not in params:
                    st.session_state.parameters = params
                    st.session_state.ai_analysis = None
                    st.success("‚úÖ Tr√≠ch xu·∫•t th√†nh c√¥ng! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a.")
                else:
                    st.session_state.parameters = None
                    st.error(f"‚ùå L·ªói tr√≠ch xu·∫•t: {params.get('error', 'AI kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªß 6 th√¥ng s·ªë t√†i ch√≠nh ƒë∆∞·ª£c y√™u c·∫ßu trong file. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung.')}")


# --- Hi·ªÉn th·ªã Th√¥ng s·ªë ƒë√£ Tr√≠ch xu·∫•t ---
if st.session_state.parameters:
    
    st.markdown("### üìù C√°c Th√¥ng s·ªë T√†i ch√≠nh ƒë√£ Tr√≠ch xu·∫•t")
    col1, col2, col3 = st.columns(3)
    
    P = st.session_state.parameters
    
    with col1:
        st.metric("V·ªën ƒê·∫ßu t∆∞ (I)", f"{P.get('v·ªën_ƒë·∫ßu_t∆∞', 0):,.0f} VND")
        st.metric("Doanh thu H√†ng nƒÉm (R)", f"{P.get('doanh_thu_h√†ng_nƒÉm', 0):,.0f} VND")
    with col2:
        st.metric("Chi ph√≠ H√†ng nƒÉm (C)", f"{P.get('chi_ph√≠_h√†ng_nƒÉm', 0):,.0f} VND")
        st.metric("D√≤ng ƒë·ªùi D·ª± √°n (N)", f"{P.get('d√≤ng_ƒë·ªùi_d·ª±_√°n', 0):.0f} nƒÉm")
    with col3:
        st.metric("WACC", f"{P.get('wacc', 0):.2%}")
        st.metric("Thu·∫ø su·∫•t (T)", f"{P.get('thu·∫ø', 0):.2%}")
        
    st.markdown("---")
    st.markdown("### 2. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn")
    
    # K√≠ch ho·∫°t t√≠nh to√°n D√≤ng ti·ªÅn
    st.session_state.cash_flow_df = calculate_cash_flow(P)
    
    if st.session_state.cash_flow_df is not None:
        st.dataframe(st.session_state.cash_flow_df.style.format({
            'D√≤ng ti·ªÅn Ho·∫°t ƒë·ªông (OCF)': '{:,.0f}',
            'ƒê·∫ßu t∆∞ (I)': '{:,.0f}',
            'D√≤ng ti·ªÅn Thu·∫ßn (CF)': '{:,.0f}',
            'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u': '{:,.0f}' # Th√™m c·ªôt n√†y ƒë·ªÉ d·ªÖ nh√¨n
        }), use_container_width=True)

        st.markdown("---")
        st.markdown("### 3. T√≠nh to√°n C√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£")
        
        # K√≠ch ho·∫°t t√≠nh to√°n Ch·ªâ s·ªë
        st.session_state.metrics = calculate_metrics(st.session_state.cash_flow_df.copy(), P['wacc'])
        
        M = st.session_state.metrics
        
        metric_col1, metric_col2, metric_col3, metric_col4 = st.columns(4)
        
        with metric_col1:
            # NPV
            npv_color = 'green' if M['NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)'] > 0 else 'red'
            st.markdown(f"""
            <div style='background-color:#f0f2f6; padding:15px; border-radius:10px; border-left: 5px solid {npv_color};'>
                <small>NPV (VND)</small>
                <h3 style='margin:0; color:{npv_color};'>{M['NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)']:.0f}</h3>
            </div>
            """, unsafe_allow_html=True)
            
        with metric_col2:
            # IRR
            irr_color = 'green' if M['IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)'] > P['wacc'] else 'red'
            st.markdown(f"""
            <div style='background-color:#f0f2f6; padding:15px; border-radius:10px; border-left: 5px solid {irr_color};'>
                <small>IRR</small>
                <h3 style='margin:0; color:{irr_color};'>{M['IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)']:.2%}</h3>
            </div>
            """, unsafe_allow_html=True)

        with metric_col3:
            # PP
            st.metric("Th·ªùi gian Ho√†n v·ªën (PP)", f"{M['PP (Th·ªùi gian ho√†n v·ªën)']:.2f} nƒÉm")

        with metric_col4:
            # DPP
            st.metric("Ho√†n v·ªën Chi·∫øt kh·∫•u (DPP)", f"{M['DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u)']:.2f} nƒÉm")

        st.markdown("---")
        st.markdown("### 4. Ph√¢n t√≠ch Chuy√™n s√¢u b·ªüi AI")
        
        # N√∫t b·∫•m k√≠ch ho·∫°t AI Analysis
        if st.button("üöÄ Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n", use_container_width=True):
            with st.spinner("üß† Gemini ƒëang ƒë√°nh gi√° v√† ƒë∆∞a ra nh·∫≠n x√©t..."):
                analysis = get_ai_business_analysis(M, P['wacc'], GEMINI_API_KEY)
                st.session_state.ai_analysis = analysis

        if st.session_state.ai_analysis:
            st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Chuy√™n gia AI:**")
            st.info(st.session_state.ai_analysis)
